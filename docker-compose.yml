version: "3.8" # Specify a recent Docker Compose version

volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ["demo"]
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434} # Uses provided OLLAMA_HOST or defaults
    - N8N_HOST=${DOMAIN}
    - N8N_PROTOCOL=https
    - WEBHOOK_URL=https://${DOMAIN}
    # Fix 1: Add N8N_RUNNERS_ENABLED
    - N8N_RUNNERS_ENABLED=true
    # Fix 2: Add N8N_EDITOR_BASE_URL and N8N_PROXY_HOST for X-Forwarded-For
    - N8N_EDITOR_BASE_URL=https://${DOMAIN}/
    - N8N_PROXY_HOST=${DOMAIN}
    # Optional: If your proxy isn't on standard ports, you might need these, but usually not:
    # - N8N_PROXY_PORT=443
    # - N8N_PROXY_SCHEME=https
    - N8N_BASIC_AUTH_ACTIVE=true
    - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
    - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_SECURE_COOKIE=true # Changed to true for HTTPS deployments (recommended)
  env_file:
    - path: .env
      required: true

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama # This might conflict if both ollama-cpu and ollama-gpu try to use it
  networks: ["demo"]
  restart: unless-stopped
  mem_limit: 12g # Consider adjusting based on your model size and system RAM
  cpus: 1.5
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ["demo"]
  container_name: ollama-pull-llama # This also might conflict if multiple are active
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ["demo"]
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    # Note: Ensure /demo-data/credentials and /demo-data/workflows exist and are valid.
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678" # Expose for system nginx to proxy to
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data # This might not be needed for the main n8n service unless it directly accesses demo data
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
    mem_limit: 2048m
    cpus: 1.0

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ["demo"]
    restart: unless-stopped
    volumes:
      - qdrant_storage:/qdrant/storage

  # --- Ollama services (choose one based on your hardware profile) ---
  # Only one of these `ollama-cpu`, `ollama-gpu`, `ollama-gpu-amd`
  # should be active at a time, depending on your `docker compose` command.

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama
    container_name: ollama # Re-assign container_name here to be unique for this service
    # If running both CPU and GPU versions, ensure their container_names are distinct.
    # For a standard setup, you'd usually just have ONE ollama service definition.

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    container_name: ollama-gpu-nvidia # Unique name for GPU version
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    container_name: ollama-gpu-amd # Unique name for AMD GPU version
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  # --- Ollama Model Pulling Services ---
  # These also need to depend on the *specific* ollama service you intend to use.

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    container_name: ollama-pull-llama-cpu # Unique name
    depends_on:
      ollama-cpu:
        condition: service_started # Ensure the ollama-cpu service is up before pulling

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    container_name: ollama-pull-llama-gpu-nvidia # Unique name
    depends_on:
      ollama-gpu:
        condition: service_started # Ensure the ollama-gpu service is up before pulling

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    container_name: ollama-pull-llama-gpu-amd # Unique name
    image: ollama/ollama:rocm
    depends_on:
      ollama-gpu-amd:
        condition: service_started # Ensure the ollama-gpu-amd service is up before pulling
